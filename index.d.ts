import { mod, fract, degToRad, radToDeg, wrap, pingPong, linspace, lerp, lerpArray, inverseLerp, lerpFrames, clamp, clamp01, smoothstep, damp, dampArray, mapRange, expand2D, expand3D, expand4D } from "./math";
import { boolean, chance, createRandom, gaussian, getRandomSeed, getSeed, insideCircle, insideSphere, noise1D, noise2D, noise3D, noise4D, onCircle, onSphere, permuteNoise, pick, quaternion, range, rangeFloor, setSeed, shuffle, sign, value, valueNonZero, weighted, weightedSet, weightedSetIndex } from "./random";

export const random: {
    value: typeof value;
    createRandom: typeof createRandom;
    setSeed: typeof setSeed;
    getSeed: typeof getSeed;
    getRandomSeed: typeof getRandomSeed;
    valueNonZero: typeof valueNonZero;
    permuteNoise: typeof permuteNoise;
    noise1D: typeof noise1D;
    noise2D: typeof noise2D;
    noise3D: typeof noise3D;
    noise4D: typeof noise4D;
    sign: typeof sign;
    boolean: typeof boolean;
    chance: typeof chance;
    range: typeof range;
    rangeFloor: typeof rangeFloor;
    pick: typeof pick;
    shuffle: typeof shuffle;
    onCircle: typeof onCircle;
    insideCircle: typeof insideCircle;
    onSphere: typeof onSphere;
    insideSphere: typeof insideSphere;
    quaternion: typeof quaternion;
    weighted: typeof weighted;
    weightedSet: typeof weightedSet;
    weightedSetIndex: typeof weightedSetIndex;
    gaussian: typeof gaussian;
};

export const math: {
    mod: typeof mod;
    fract: typeof fract;
    sign: typeof sign;
    degToRad: typeof degToRad;
    radToDeg: typeof radToDeg;
    wrap: typeof wrap;
    pingPong: typeof pingPong;
    linspace: typeof linspace;
    lerp: typeof lerp;
    lerpArray: typeof lerpArray;
    inverseLerp: typeof inverseLerp;
    lerpFrames: typeof lerpFrames;
    clamp: typeof clamp;
    clamp01: typeof clamp01;
    smoothstep: typeof smoothstep;
    damp: typeof damp;
    dampArray: typeof dampArray;
    mapRange: typeof mapRange;
    expand2D: typeof expand2D;
    expand3D: typeof expand3D;
    expand4D: typeof expand4D;
};
export const penplot: typeof import("./penplot");
export const geometry: typeof import("./geometry");
export const shader: typeof import("./shader");
export const color: typeof import("./color");
